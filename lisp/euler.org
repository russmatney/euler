* Hello World
#+begin_src lisp
(print "hello world")
#+end_src

#+RESULTS:
: hello

** Prereqs
- `brew install clisp`
- package-install RET slime
- config slime (see emacs config)

from there, c-c c-c in src blocks will recalc results

** Escape
When all this common lisp and slime is too much,
fall back to emacs lisp

#+begin_src emacs-lisp
(defun fizz_buzz ()
  (message "hello world")
)

(fizz_buzz)
#+end_src

#+RESULTS:
: hello world



* Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

#+begin_src emacs-lisp
(defun multiple-of-3-or-5 (x)
  (or
    (= (mod x 3) 0)
    (= (mod x 5) 0)
  )
)

(defun ret-if-multiple (x)
  (if (multiple-of-3-or-5 x)
    x
    nil
  )
)

(defun list-multiples (limit)
  (remove-if-not 'ret-if-multiple (number-sequence 1 limit))
)

(defun sum-multiples (limit)
  (seq-reduce #'+ (list-multiples limit) 0)
)

(sum-multiples 1000)
#+end_src

#+RESULTS:
: 234168


** Notes
Gotcha: (remove-if-not) is in CL package, i.e. common lisp.
* Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#+begin_src emacs-lisp
(defun fib (sum, seq)
  (cond
    ((eq seq '()) (fib 0 '(1))
    ((eq seq '(1)) (fib 1 '(1 1))
    (t (fib (sum seq) 1 '(1 1))
    ((= x 1) '(1))
    ((< sum max) sum)
    (t (cons (+ (fib (- x 1) x)))
  )
)

(defun sum (list)
  (cond
    ((= 0 (car list)) 0)
    (t (+ (car list) (sum (cdr list))))
  )
)

(sum (fib 10))

;; (car (fib 7))
#+end_src

#+RESULTS:
: ((((((0 . 1) . 2) . 3) . 4) . 5) . 6)

* Helpers

#+begin_src emacs-lisp
(local-set-key (kbd "C-k") 'eval-last-sexp)
#+end_src

#+RESULTS:
: org-ctrl-c-ctrl-c

